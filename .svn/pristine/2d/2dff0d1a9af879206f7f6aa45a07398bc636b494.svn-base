<?php
/**
 * 流量平台API接口
 * $Id$
 */
class ControllerAppApi extends modules_public
{
	/**
	 * @param Registry $registry 注册对象
	 */
	public function __construct($registry)
	{
		parent::__construct($registry);

		$this->checkToken(); //token校验
	}

	/**
	 * 流量上报接口
	 */
	public function report()
	{
		/*
		 * 设置流量修改锁，流量计算修改完成后释放
		 * 防止流量充值时，接口流量计算产生数据混乱
		 */
		$this->registry->model('app/gprs');
		$iccid = $this->request->get_var('iccid');
		$mkey  = "GPRS-CARD-LOCK-{$iccid}";
		$this->mem_set($mkey, 1);
		$card_info = $this->model_app_gprs->getByIccid($iccid);//获取流量卡信息
		if (empty($card_info))
		{
			$this->mem_del($mkey);//删除流量锁缓存
			$result = array(
				'status' => -1,
				'msg'    => 'can not get card info'
			);
			exit(json_encode($result));
		}

		/*
		 * 获取预警信息
		 */
		$used_month = $this->request->get_var('used_month', 'f', '', 0.01);
		$used_total = $this->request->get_var('used_total', 'f');
		$alert_info = $this->model_app_gprs->getAlertInfo($this->_org_id);

		/*
		 * 记录上行、下行流量日志
		 */
		$log_data = array(
			'card_id'   => $card_info['card_id'],
			'up_gprs'   => $this->request->get_var('up_gprs', 'f'),
			'down_gprs' => $this->request->get_var('down_gprs', 'f'),
		);
		$this->model_app_gprs->insertLog($log_data);

		/*
		 * 流量卡的流量没过期情况下
		 * 车机当月使用流量小于数据库中当月使用流量，说明已换卡,以数据库中的数据为准直接返回给车机
		 */
		if ($used_month <= $card_info['used_month'] && strtotime($card_info['time_expire']) >= time())
		{
			$result = array(
				'status'      => 1,
				'msg'         => 'get card gprs info succeed',
				'alert_value' => $alert_info['alert_value'],
				'used_total'  => $card_info['used_total'],
				'used_month'  => $card_info['used_month'],
				'max_unused'  => $card_info['max_unused'],
			);
			$this->mem_del($mkey);//删除流量锁缓存
			exit(json_encode($result));
		}

		/*
		 * 车机总使用流量小于数据库中的总使用流量（说明已换卡）
		 */
		if ($used_total <= $card_info['used_total'])
		{
			$used_total = $card_info['used_total'];
		}
		if ($used_month <= $card_info['used_month'])
		{
			$used_month = $card_info['used_month'];
		}

		$data               = $card_info;//需要更新的数据组
		$data['used_total'] = $used_total;//累计使用流量
		$data['used_month'] = $used_month;//当前月使用流量
		$data['time_last']  = date('Y-m-d H:i:s');//最后更新时间

		/*
		 * 判断流量卡是否已过期
		 * 车机当月使用流量超过月赠送流量，需使用充值流量
		 */
		if (strtotime($card_info['time_expire']) < time())
		{
			$data['gprs_month'] = $data['max_unused'] = $data['pay_unused'] = 0;
		}
		elseif ($used_month >= $card_info['gprs_month'])
		{
			/*
			 * 判断数据表中当月使用流量是否已经超过月赠送流量
			 */
			if ($card_info['used_month'] >= $card_info['gprs_month'])
			{
				$data['pay_unused'] = $card_info['pay_unused'] - ($used_month - $card_info['used_month']);//扣充值流量
			}
			else
			{
				$data['pay_unused'] = $card_info['pay_unused'] - ($used_month - $card_info['gprs_month']);//先扣赠送流量再扣充值流量
			}

			$data['max_unused'] = $data['pay_unused'];//最大可使用流量等于购买未使用的流量
			$data['gprs_month'] = 0;//当前使用一次性赠送流量方案，当使用的流量超过赠送流量时，则把月赠送流量gprs_month置为0
		}
		else
		{
			$data['gprs_month'] = $card_info['gprs_month'];//当前月赠送流量，带过去是为了方便统计当月超标流量
			$data['max_unused'] = $card_info['pay_unused'] + ($card_info['gprs_month'] - $used_month);//流量未超标
		}

		/*
		 * 更新流量卡的流量信息
		 */
		$result = $this->model_app_gprs->update($data);
		$this->mem_del($mkey);//删除流量锁缓存
		if (!$result)
		{
			$result = array(
				'status' => 0,
				'msg'    => 'update card gprs failed'
			);
			exit(json_encode($result));
		}
		$this->model_app_gprs->saveMonthData($data);//记录下流量卡每月流量使用情况

		/*
		 * 最大可使用流量低于预警值或流量有效期还差三天到期，发送消息通知机构
		 */
		if (!$this->mem_get("GPRS-CARD-NOTICE-{$iccid}") && ($data['max_unused'] <= $alert_info['alert_value'] || strtotime("+ 3day") >= strtotime($card_info['time_expire'])))
		{
			$this->registry->language('app/api');
			/*
			 * 判断可使用流量或有效期时间
			 */
			if (strtotime("+ 3day") >= strtotime($card_info['time_expire']))
			{
				$cmd    = 'expire';
				$notify = array(
					'time' => $card_info['time_expire'],
					'msg'  => $this->language->get('text_gprs_expire')
				);
			}
			else
			{
				$cmd    = $data['max_unused'] > 0 ? 'warning' : 'over';
				$notify = array(
					'balance' => $data['max_unused'],
					'msg'     => $data['max_unused'] > 0 ? $alert_info['alert_tpl1'] : $alert_info['alert_tpl2']
				);
			}
			$this->notifyCmd($iccid, $cmd, $notify);
			$this->mem_set("GPRS-CARD-NOTICE-{$iccid}", 1); //设置微信通知间隔时间。默认30分钟
		}

		/**
		 * 返回统计好的数据给车机
		 */
		$result = array(
			'status'      => 1,
			'msg'         => 'update card gprs succeed',
			'alert_value' => $alert_info['alert_value'],
			'used_total'  => $data['used_total'],
			'used_month'  => $data['used_month'],
			'max_unused'  => $data['max_unused'],
		);
		exit(json_encode($result));
	}

	/**
	 * 获取流量卡信息
	 */
	public function info()
	{
		$iccids    = $this->request->get_var('iccid', 'a');
		$iccid_num = count($iccids);

		if ($iccid_num > 0 && $iccid_num <= 10)
		{
			$this->registry->model('app/gprs');
			$data = array();
			foreach ($iccids as $iccid)
			{
				$card_info = $this->model_app_gprs->getByIccid($iccid);//获取流量卡信息
				if ($card_info)
				{
					unset($card_info['card_id'], $card_info['org_id'], $card_info['batch_id'], $card_info['card_sn'], $card_info['card_name']);
					$data[] = $card_info;
				}
			}

			if ($data)
			{
				$result = array(
					'status' => 1,
					'msg'    => 'get iccids info succeed',
					'data'   => $data
				);
				exit(json_encode($result));
			}
		}

		$result = array(
			'status' => 0,
			'msg'    => 'get iccids info failed'
		);
		exit(json_encode($result));
	}

	/**
	 * 获取流量卡充值记录
	 */
	public function paylog()
	{
		$iccid    = $this->request->get_var('iccid');
		$is_paid  = $this->request->get_var('is_paid', 'i');
		$page     = $this->request->get_var('page', 'i', '', 1);
		$pagesize = $this->request->get_var('pagesize', 'i', '', (int)$this->config->get('config_catalog_limit'));

		/**
		 * 获取流量卡信息
		 */
		$this->registry->model('app/gprs');
		$card_info = $this->model_app_gprs->getByIccid($iccid);
		if (!$card_info)
		{
			$result = array(
				'status' => 0,
				'msg'    => 'iccid error',
			);

			exit(json_encode($result));
		}

		$data = array(
			'start'          => ((int)$page - 1) * $pagesize,
			'limit'          => $pagesize,
			'filter_card_id' => $card_info['crad_id'],
		);

		if ($is_paid)
		{
			$data['filter_is_paid'] = $is_paid;
		}

		$items = $this->model_app_gprs->getPayAll($data);
		if ($items)
		{
			$data = array();
			foreach ($items as $vo)
			{
				$data[] = array(
					'gprs_amount' => $vo['gprs_amount'],
					'gprs_price'  => $vo['gprs_price'],
					'gprs_memo'   => $vo['gprs_memo'],
					'pay_method'  => $vo['pay_method'],
					'transfer_id' => $vo['transfer_id'],
					'is_paid'     => $vo['is_paid'],
					'time_paid'   => $vo['time_paid'],
					'time_added'  => $vo['time_added']
				);
			}

			$result = array(
				'status' => 1,
				'msg'    => 'iccid info succeed',
				'data'   => $data
			);
		}
		else
		{
			$result = array(
				'status' => 0,
				'msg'    => 'log not_found',
			);
		}

		exit(json_encode($result));
	}
}
?>