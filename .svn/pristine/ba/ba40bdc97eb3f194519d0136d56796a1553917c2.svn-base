<?php
class ModelUserUser extends Model
{
	private $_opt = 'cc_user';

	public function addUser($data)
	{
		$s2p = $this->salt2pwd($data['password']);
		$this->mdb()->query("INSERT INTO {$this->_opt} SET
		username = '{$data['username']}', salt = '{$s2p['salt']}', password = '{$s2p['pwd']}',org_id = '{$data['org_id']}',
		email = '{$data['email']}', tel = '{$data['tel']}',lang = '{$data['user_lang']}', user_group_id = '{$data['user_group_id']}', status = '{$data['status']}', date_added = NOW()");
		$this->createTables($this->mdb()->insert_id());
	}

	/**
	 * 更新用户状态
	 *
	 * @param array $data
	 * @return bool|int
	 */
	public function update($data = array())
	{
		$data['date_last'] = 'dbf|NOW()';

		return $this->mdb()->update($this->_opt, $data, "user_id = '{$data['user_id']}'");
	}

	/**
	 * 为OEM商创建数据表
	 *
	 * @param $id
	 */
	public function createTables($id)
	{
		return;
		$mdb = $this->mdb();
		$sql = "CREATE TABLE `cc_photo{$id}` (
		  `photo_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '图片编号',
		  `photo_url` varchar(200) NOT NULL COMMENT '图片地址',
		  `device_id` int(11) NOT NULL COMMENT '设备编号',
		  `longitude` varchar(20) DEFAULT '' COMMENT '经度座标',
		  `latitude` varchar(20) DEFAULT '' COMMENT '纬度座标',
		  `location` varchar(255) DEFAULT '' COMMENT '地理位置',
		  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '状态：0无效 1有效',
		  `time_added` datetime DEFAULT NULL COMMENT '拍摄时间',
		  PRIMARY KEY (`photo_id`),
		  KEY `device_id` (`device_id`)
		) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='拍摄图片表'";
		$mdb->query($sql);

		$sql = "CREATE TABLE `cc_video{$id}` (
		  `video_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '视频编号',
		  `video_url` varchar(200) NOT NULL COMMENT '图片地址',
		  `device_id` int(11) NOT NULL COMMENT '设备编号',
		  `longitude` varchar(20) DEFAULT '' COMMENT '经度座标',
		  `latitude` varchar(20) DEFAULT '' COMMENT '纬度座标',
		  `location` varchar(255) DEFAULT '' COMMENT '地理位置',
		  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '状态：0无效 1有效',
		  `time_added` datetime DEFAULT NULL COMMENT '拍摄时间',
		  PRIMARY KEY (`video_id`),
		  KEY `device_id` (`device_id`)
		) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='拍摄视频表'";
		$mdb->query($sql);

		$sql = "CREATE TABLE `cc_trace{$id}` (
		  `trace_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '轨迹编号',
		  `device_id` int(11) NOT NULL COMMENT '设备编号',
		  `lng2lat` mediumtext COMMENT '经纬度列表 lng,lat\n',
		  `time_added` datetime DEFAULT NULL COMMENT '记录时间',
		  PRIMARY KEY (`trace_id`),
		  KEY `device_id` (`device_id`)
		) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='行程轨迹表'";
		$mdb->query($sql);

		$sql = "CREATE TABLE `cc_location{$id}` (
		  `location_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '定位编号',
		  `device_id` int(11) NOT NULL COMMENT '设备编号',
		  `longitude` varchar(20) DEFAULT '' COMMENT '经度座标',
		  `latitude` varchar(20) DEFAULT '' COMMENT '纬度座标',
		  `location` varchar(255) DEFAULT '' COMMENT '地理位置',
		  `time_added` datetime DEFAULT NULL COMMENT '记录时间',
		  PRIMARY KEY (`location_id`),
		  KEY `device_id` (`device_id`)
		) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='实时定位表'";
		$mdb->query($sql);
	}

	public function editUser($user_id, $data)
	{
		$this->mdb()->query("UPDATE {$this->_opt} SET username = '{$data['username']}',
			 email = '{$data['email']}', tel = '{$data['tel']}',lang = '{$data['user_lang']}', user_group_id = '{$data['user_group_id']}',
			status = '{$data['status']}', error_count = 0 WHERE user_id = '{$user_id}'");

		if ($data['password'])
		{
			$this->editPassword($user_id, $data['password']);
		}

		$this->mem_del(trim($data['username']));
	}

	public function editPassword($user_id, $password)
	{
		$s2p = $this->salt2pwd($password);
		$this->mdb()->query("UPDATE {$this->_opt} SET salt = '{$s2p['salt']}', password = '{$s2p['pwd']}', code = '' WHERE user_id = '{$user_id}'");
	}

	public function editCode($email, $code)
	{
		$this->mdb()->query("UPDATE {$this->_opt} SET code = '{$code}' WHERE email = '{$email}'");
	}

	public function deleteUser($user_id)
	{
		$this->mdb()->query("DELETE FROM {$this->_opt} WHERE user_id = '{$user_id}'");
	}

	public function getUser($user_id)
	{
		return $this->sdb()->fetch_row("SELECT * FROM {$this->_opt} WHERE user_id = '{$user_id}'");
	}

	public function getUserByUsername($username)
	{
		return $this->sdb()->fetch_row("SELECT * FROM {$this->_opt} WHERE username = '{$username}'");
	}

	public function getUserByCode($code)
	{
		return $this->sdb()->fetch_row("SELECT * FROM {$this->_opt} WHERE code = '{$code}' AND code != ''");
	}

	public function getUsers($data = array())
	{
		$sort_data = array(
			'username',
			'user_group_id',
			'org_id',
			'status',
			'date_added'
		);

		$sql = "SELECT * FROM {$this->_opt}";
		$sql .= (isset($data['sort']) && in_array($data['sort'], $sort_data)) ? " ORDER BY {$data['sort']}" : ' ORDER BY username';
		$sql .= (isset($data['order']) && ($data['order'] == 'DESC')) ? ' DESC' : ' ASC';
		if (isset($data['start']) || isset($data['limit']))
		{
			$data['start'] = ($data['start'] < 0) ? 0 : (int)$data['start'];
			$data['limit'] = ($data['limit'] < 1) ? 20 : (int)$data['limit'];
			$sql .= " LIMIT {$data['start']}, {$data['limit']}";
		}

		return $this->sdb()->fetch_all($sql);
	}

	public function getTotalUsers()
	{
		$row = $this->sdb()->fetch_row("SELECT COUNT(*) AS total FROM {$this->_opt}");

		return $row['total'];
	}

	public function getTotalUsersByGroupId($user_group_id)
	{
		$row = $this->sdb()->fetch_row("SELECT COUNT(*) AS total FROM {$this->_opt} WHERE user_group_id = '{$user_group_id}'");

		return $row['total'];
	}

	public function getTotalUsersByEmail($email)
	{
		$row = $this->sdb()->fetch_row("SELECT COUNT(*) AS total FROM {$this->_opt} WHERE email = '{$email}'");

		return $row['total'];
	}

	public function getTotalUsersByOrg($org_id)
	{
		$row = $this->sdb()->fetch_row("SELECT COUNT(*) AS total FROM {$this->_opt} WHERE org_id = '{$org_id}'");

		return $row['total'];
	}

	public function getOrgs()
	{
		$sql = 'SELECT org_id, name FROM `' . DB_PREFIX . 'org`';
		$sql .= $this->user->getGroupId() <= 1 ? '' : " WHERE org_id = '{$this->user->getOrgId()}'";

		return $this->sdb()->fetch_pairs($sql);
	}

	public function getGroup()
	{
		$sql = 'SELECT user_group_id, name FROM `' . DB_PREFIX . 'user_group`';
		$sql .= $this->user->getGroupId() <= 1 ? '' : " WHERE org_id = '{$this->user->getOrgId()}'";

		return $this->sdb()->fetch_pairs($sql);
	}
}
?>